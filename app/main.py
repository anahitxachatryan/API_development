from typing import Optional
from typing import List
from fastapi import FastAPI, Response, status, HTTPException, Depends
from fastapi.param_functions import Body
from pydantic import BaseModel
from random import randrange
import psycopg2
from psycopg2.extras import RealDictCursor
import time
from . import models
from .database import engine, get_db
from sqlalchemy.orm import Session
from . import models
from . import schemas
 # to use autogenerated documentation use url: /doc or /redoc

models.Base.metadata.create_all(bind=engine)


app = FastAPI()



while True:
    try:
        conn = psycopg2.connect(host = 'localhost', database = 'API_development', user = 'postgres', password = 'qwerty111', 
        cursor_factory = RealDictCursor)
        cursor  = conn.cursor()
        print("database connection was successfull")
        break
    except Exception as error:
        print("connecting the database failed")
        print(error)
        time.sleep(3)

  
@app.get("/")
def root():
    return {"message":"Hello"}



@app.get("/posts", response_model=List[schemas.Post])
def get_posts(db: Session = Depends(get_db)):
    
    posts = db.query(models.Post).all()
    return posts


@app.post("/posts", status_code = status.HTTP_201_CREATED, response_model=schemas.Post)
def create_post(post: schemas.CreatePost, db: Session = Depends(get_db)):
    new_post = models.Post(**post.dict())
    #commit 
    db.add(new_post)
    db.commit()
    #return the created post
    db.refresh(new_post)
    return new_post

@app.get("/posts/{id}", response_model = schemas.Post)
def get_post(id: int, db: Session = Depends(get_db)):
   
    post = db.query(models.Post).filter(models.Post.id == id).first()
    if not post:
        raise HTTPException(status_code = status.HTTP_404_NOT_FOUND, 
                            detail = f"Post with id {id} was not found")
    return post




@app.delete("/posts/{id}", status_code = status.HTTP_204_NO_CONTENT)
def delete_post(id: int, db: Session = Depends(get_db)):
   
    post = db.query(models.Post).filter(models.Post.id == id)

    if post.first() == None:
        raise HTTPException(status_code = status.HTTP_404_NOT_FOUND, 
                            detail = f"post with id {id} does not exsist") 
    post.delete(synchronize_session=False) 
    db.commit()

    return Response(status_code = status.HTTP_204_NO_CONTENT)

@app.put("/posts/{id}", response_model = schemas.Post)
def update_post(id: int, updated_post: schemas.CreatePost, db: Session = Depends(get_db)):

    post_query = db.query(models.Post).filter(models.Post.id == id)
    post = post_query.first()
    

    if post == None:
        raise HTTPException(status_code = status.HTTP_404_NOT_FOUND, 
                            detail = f"post with id {id} does not exsist")
    
    
    print(updated_post.dict())
    
    post_query.update(
        updated_post.dict()
         ,synchronize_session=False)
    db.commit()
    print(post_query.first().title)
    return post_query.first()


@app.post("/users", status_code = status.HTTP_201_CREATED, response_model=schemas.UserOut)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    
    new_user = models.User(**user.dict())
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    return new_user

  