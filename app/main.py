from typing import Optional
from fastapi import FastAPI, Response, status, HTTPException, Depends
from fastapi.param_functions import Body
from pydantic import BaseModel
from random import randrange
import psycopg2
from psycopg2.extras import RealDictCursor
import time
from . import models
from .database import engine, get_db
from sqlalchemy.orm import Session

 # to use autogenerated documentation use url: /doc or /redoc

models.Base.metadata.create_all(bind=engine)


app = FastAPI()



while True:
    try:
        conn = psycopg2.connect(host = 'localhost', database = 'API_development', user = 'postgres', password = 'qwerty111', 
        cursor_factory = RealDictCursor)
        cursor  = conn.cursor()
        print("database connection was successfull")
        break
    except Exception as error:
        print("connecting the database failed")
        print(error)
        time.sleep(3)

class Post(BaseModel):
    title:str
    content:str
    published:bool = True
  
    


# my_posts = [{"title":"title of post 1", "content":"content of post 1", "id":1}, 
#             {"title2":"title of post 2", "content":"content of post 2", "id":2}]

# def find_post(id):
#     for p in my_posts:
#         if p['id'] == id:
#             return p

# def find_post_by_index(id):
#     for i, p in enumerate(my_posts):
#         if p['id'] == id:
#             return i

@app.get("/")
def root():
    return {"message":"Hello"}

@app.get("/sqlalchemy")
def test_posts(db: Session = Depends(get_db)):
    return{"status":'success'}

@app.get("/posts")
def get_posts():
    cursor.execute("""SELECT * FROM posts""")
    posts = cursor.fetchall()
    print(posts)
    return {"data": posts}


@app.post("/posts", status_code = status.HTTP_201_CREATED)
def create_post(post: Post):
    cursor.execute("""INSERT into posts (title, content, published)
                    values (%s, %s, %s) RETURNING *""", (post.title, post.content, post.published))
    new_post = cursor.fetchone()
    conn.commit()
    return {"data":new_post}

@app.get("/post/{id}")
def get_post(id: int):
    cursor.execute("""SELECT * FROM posts WHERE id = %s """,str(id))
    post = cursor.fetchone()
    if not post:
        raise HTTPException(status_code = status.HTTP_404_NOT_FOUND, 
                            detail = f"Post with id {id} was not found")
    return {"post_detail":post}

@app.delete("/post/{id}", status_code = status.HTTP_204_NO_CONTENT)
def delete_post(id: int):
    cursor.execute(""" DELETE FROM posts where id = %s RETURNING *""",(str(id),))
    post = cursor.fetchone()
    conn.commit()
    if post == None:
        raise HTTPException(status_code = status.HTTP_404_NOT_FOUND, 
                            detail = f"post with id {id} does not exsist")  
    

    return Response(status_code = status.HTTP_204_NO_CONTENT)

@app.put("/post/{id}")
def update_post(id: int, post: Post):
    cursor.execute(""" UPDATE posts SET title = %s, content = %s, published = %s WHERE id = %s RETURNING *""",(post.title,
                                                                                                 post.content,
                                                                                                 post.published,
                                                                                                 str(id)))
    post = cursor.fetchone()
    conn.commit()
    if post == None:
        raise HTTPException(status_code = status.HTTP_404_NOT_FOUND, 
                            detail = f"post with id {id} does not exsist")

    return {"data":post}


  